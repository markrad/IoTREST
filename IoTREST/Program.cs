using System;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace IoTREST
{
    /// <summary>
    /// Sends a message to an Azure IoT hub via REST until enter is pressed on the console
    /// </summary>
    class Program
    {
        static volatile bool Run = true;        // Remains true until user presses enter to terminate the program

        static void Main(string[] args)
        {
            const string IOT_CONNECTION_STRING = "<Insert connection string acquired from the device explorer>";
            Task t = SendData(IOT_CONNECTION_STRING);

            Console.WriteLine("Press enter to quit");
            Console.ReadLine();
            Run = false;
            Task.WaitAny(t);
            Console.WriteLine("Done");
        }

        private async static Task SendData(string connectionString)
        {
            const int rate = 5;         // Message send rate in seconds
            int counter = rate - 1;     // Forces message send on first wake up
            ConnectionInfo connInfo = new ConnectionInfo(connectionString);

/*
// Uncomment these lines to send the HTTP request via a Fiddler 4 proxy running on the same machine
            HttpClientHandler httpClientHandler = new HttpClientHandler
            {
                Proxy = new WebProxy("http://localhost:8888", false),
                UseProxy = true
            };
*/

            while (Run)
            {
                try
                {
                    await Task.Delay(1000);

                    if (connInfo.ExpiresAt - DateTime.UtcNow < TimeSpan.FromSeconds(10))
                        connInfo.RegeneratePassword();

                    if (counter++ == rate)
                    {
                        Console.Write("Working: ");
                        counter = 0;

                        using (HttpRequestMessage httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, connInfo.Uri)
                        { Content = new StringContent("{ \"My Key\": \"My Value\" }",Encoding.UTF8, "application/json") })
                        {
                            httpRequestMessage.Headers.Authorization = new AuthenticationHeaderValue("SharedAccessSignature", connInfo.Password);

                            using (HttpResponseMessage httpResponseMessage = await new HttpClient().SendAsync(httpRequestMessage))
                            {
                                if (httpResponseMessage.StatusCode == HttpStatusCode.NoContent)
                                {
                                    Console.WriteLine("Message sent");
                                }
                                else
                                {
                                    Console.WriteLine("Message send failed with " + httpResponseMessage.StatusCode.ToString());
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception: " + e.Message);
                }
            }

            Console.WriteLine("Task complete");
        }

        /// <summary>
        /// Parses a connection string a makes its contents available via properties and generate a SAS token
        /// </summary>
        private class ConnectionInfo
        {
            private static readonly DateTime EPOCH = new DateTime(1970, 1, 1, 0, 0, 0);
            private int SASTTL;

            /// <summary>
            /// Extract values from connection string
            /// </summary>
            /// <param name="connectionString">Connection string in format generated by the Device Explorer utility</param>
            /// <param name="expiresInMinutes">Number of minutes before SAS token expiration</param>
            public ConnectionInfo(string connectionString, int expiresInMinutes = 60)
            {
                SASTTL = expiresInMinutes;
                const string HOSTNAME = "hostname=";
                const string DEVICEID = "deviceid=";
                const string SHARED_ACCESS_KEY_NAME = "sharedaccesskey=";

                if (string.IsNullOrWhiteSpace(connectionString))
                    throw new ArgumentNullException("connectionString");

                string[] values = connectionString.Split(';');

                if (values.Length < 3)
                    throw new ArgumentException("Invalid connection string", "connectionString");

                HostName = DeviceId = SharedAccessKey = "";

                foreach (string value in values)
                {
                    if (value.ToLower().StartsWith(HOSTNAME))
                    {
                        HostName = value.Substring(HOSTNAME.Length);
                    }
                    else if (value.ToLower().StartsWith(DEVICEID))
                    {
                        DeviceId = value.Substring(DEVICEID.Length);
                    }
                    else if (value.ToLower().StartsWith(SHARED_ACCESS_KEY_NAME))
                    {
                        SharedAccessKey = value.Substring(SHARED_ACCESS_KEY_NAME.Length);
                    }
                }

                if (HostName == "" || DeviceId == "" || SharedAccessKey == "")
                    throw new ArgumentException("Invalid connection string", "connectionString");

                Password = GeneratePassword(HostName + "/devices/" + DeviceId, SharedAccessKey, SASTTL);
            }

            /// <summary>
            /// Regenerate the password - used when the SAS token is nearing expiry
            /// </summary>
            public void RegeneratePassword()
            {
                Password = GeneratePassword(HostName + "/devices/" + DeviceId, SharedAccessKey, SASTTL);
            }

            /// <summary>
            /// Generate the SAS token
            /// </summary>
            /// <param name="resourceUri">Contains [hubname].azure-device.net/devices/[deviceid]</param>
            /// <param name="signingKey">Signing key from connection string</param>
            /// <param name="expiresInMinutes">Number of minutes before the generated SAS token expires</param>
            /// <returns></returns>
            private string GeneratePassword(string resourceUri, string signingKey, int expiresInMinutes)
            {
                resourceUri = WebUtility.UrlEncode(resourceUri);

                ExpiresAt = DateTime.UtcNow.AddMinutes(expiresInMinutes);
                TimeSpan secondsFromBaseTime = ExpiresAt.Subtract(EPOCH);
                string toSign = string.Format("{0}\n{1}", resourceUri, Math.Ceiling(secondsFromBaseTime.TotalSeconds));
                string signed = "";
                string result = "";

                using (HMACSHA256 hmac = new HMACSHA256(Convert.FromBase64String(signingKey)))
                {
                    signed = Convert.ToBase64String(hmac.ComputeHash(Encoding.UTF8.GetBytes(toSign)));
                }

                signed = WebUtility.UrlEncode(signed);
                result = string.Format("sr={0}&sig={1}&se={2}", resourceUri, signed, Math.Ceiling(secondsFromBaseTime.TotalSeconds));

                return result;
            }

            /// <summary>
            /// Returns the URL of the Azure IoT hub as in [hubname].azure-devices.net
            /// </summary>
            public string HostName { get; private set; }

            /// <summary>
            /// Returns the device identity that is being represented by this code
            /// </summary>
            public string DeviceId { get; private set; }

            /// <summary>
            /// Returns the device's shared access key
            /// </summary>
            public string SharedAccessKey { get; private set; }

            /// <summary>
            /// Returns the SAS token requireed to authenticate this device with the IoT hub
            /// </summary>
            public string Password { get; private set; }

            /// <summary>
            /// Returns the expiry time of the current SAS token
            /// </summary>
            public DateTime ExpiresAt { get; private set; }

            /// <summary>
            /// Returns the full URI with which to connect
            /// </summary>
            public string Uri
            {
                get { return string.Format("https://{0}/devices/{1}/messages/events?api-version=2016-11-14", HostName, DeviceId);  }
            }
        }
    }
}
